import streamlit as st
import pandas as pd
import joblib
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


# Step 1: Train Program model
@st.cache_resource
def load_model_and_encoders():
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ù‡∏∂‡∏Å Decision Tree ‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ)
    df = pd.read_csv("Student_Behavior.csv")

    df_cleaned = df[df['Gender'].isin(['‡∏ä‡∏≤‡∏¢','‡∏´‡∏ç‡∏¥‡∏á'])]
    df_cleaned = df_cleaned[df_cleaned['Program'].isin(['‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                                                        '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® (IT) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (Computer Science)',
                                                        'Multimedia Technology (MT)',
                                                        'Business Information Technology (BI)',
                                                        '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏°‡∏ß‡∏•‡∏ä‡∏ô Digital Communication (DC)',
                                                        '‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
                                                        '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
                                                        'Multimedia Technology (MT)','‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'])]
    
    df_cleaned.replace('‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® (IT) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (Computer Science)', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® (IT)', inplace=True)
    #df_cleaned.replace('Business Information Technology (BI)', 'Other', inplace=True)
    #df_cleaned.replace('‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏°‡∏ß‡∏•‡∏ä‡∏ô Digital Communication (DC)', 'Other', inplace=True)
    #df_cleaned.replace('Multimedia Technology (MT)', 'Other', inplace=True)
    df_cleaned.replace('‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', 'Other', inplace=True)
    df_cleaned.replace('‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•', 'Business Information Technology (BI)', inplace=True)
    df_cleaned.replace('‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•', 'Business Information Technology (BI)', inplace=True)
    
    df_cleaned["Favorite Leisure Activity"].replace("‡∏î‡∏π F1", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", inplace=True)
    df_cleaned["Favorite Leisure Activity"].replace("‡∏ï‡∏Å‡∏õ‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", inplace=True)
    df_cleaned["Favorite Leisure Activity"].replace("‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏≥", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", inplace=True)
    df_cleaned["Favorite Leisure Activity"].replace("‡∏ä‡∏≠‡∏ö‡∏ô‡∏≠‡∏ô", "‡∏ô‡∏≠‡∏ô", inplace=True)

    df_cleaned.replace('‡πÄ‡∏Ñ‡∏¢‡∏î‡∏£‡∏≠‡∏õ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ß‡∏¥‡∏ä‡∏≤', '‡πÄ‡∏Ñ‡∏¢', inplace=True)
    df_cleaned.replace('‡πÄ‡∏Ñ‡∏¢ 1 ‡∏ß‡∏¥‡∏ä‡∏≤', '‡πÄ‡∏Ñ‡∏¢', inplace=True)

    #df_cleaned["Program/Faculty Admission Success"].replace("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", inplace=True)

    columns_to_drop = [
        'Satisfaction with Academic Performance',
        'Program/Faculty Admission Success',
        'University Admission Success',
        #'Least Favorite Subject',
        #'Favorite Subject',
        #'GPA Trend',
        'Program',
        'Dropped Any Subject',
        'Goal Setting in Learning',
        'Self-Discipline in Studying',
        'Mobile Usage Behavior',
        'Peak Study Time',
        'Most Used App Daily',
        'Favorite Leisure Activity',
        'Overall Life Satisfaction'
    ]

    df_cleaned.drop(columns=columns_to_drop, inplace=True, errors='ignore')
    df_cleaned.dropna(subset=['GPA Trend'], inplace=True)
    df_cleaned.dropna(inplace=True)

    label_encoders = {}
    df_encoded = df_cleaned.copy()
    for col in df_encoded.columns:
        le = LabelEncoder()
        df_encoded[col] = le.fit_transform(df_encoded[col])
        label_encoders[col] = le

    X = df_encoded.drop(columns=['GPA Trend'])
    y = df_encoded['GPA Trend']
    #clf = DecisionTreeClassifier(random_state=42)
    clf = LogisticRegression(max_iter=1000)
    clf.fit(X, y)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    #clf_acc = DecisionTreeClassifier(random_state=42)
    clf_acc = LogisticRegression(max_iter=1000)
    clf_acc.fit(X_train, y_train)
    y_pred = clf_acc.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    return clf, label_encoders, acc



# Step 2: Predict 
clf, label_encoders, acc_score = load_model_and_encoders()

# ----------------------------
# INTERFACE
# ----------------------------
st.title("üìä ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏î‡πâ‡∏ß‡∏¢ Data Science")

target = st.selectbox(
    label="‡∏Ñ‡∏ì‡∏∞/‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
    options=["Information Technology (IT)",
             "Data Science and Data Analytics (DS)",
             "Business Information Technology (BI)",
             "Multimedia Technology (MT)",
             "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏°‡∏ß‡∏•‡∏ä‡∏ô Digital Communication (DC)", 
             "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
)

birth_month = st.selectbox(
    label="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î",
    options=["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
             "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"]
)

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
input_data = {}
input_data_tmp = {}
input_data_tmp["Birth Month"] = birth_month

col1, col2 = st.columns(2)

for i, col in enumerate(clf.feature_names_in_):
    target_col = col1 if i % 2 == 0 else col2
    with target_col:
        input_data[col] = st.selectbox(
            label=col,
            options=list(label_encoders[col].classes_)
    )
    

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"
if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö"):
    input_df = pd.DataFrame([input_data])
    for col in input_df.columns:
        input_df[col] = label_encoders[col].transform(input_df[col])
    
    prediction = clf.predict(input_df)[0]
    result = label_encoders['GPA Trend'].inverse_transform([prediction])[0]

    if result == '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô':
        st.success(f"üìà ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô")
        st.metric(label="üìä ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 100 ‡∏Ñ‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Accuracy)", value=f"{acc_score * 100:.2f}%")

    elif result == '‡∏•‡∏î‡∏•‡∏á':
        st.error(f"üìà ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î‡∏•‡∏î‡∏•‡∏á ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î‡∏ô‡∏∞")
        st.metric(label="üìä ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 100 ‡∏Ñ‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Accuracy)", value=f"{acc_score * 100:.2f}%")

    else:
        st.warning(f"üìà ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î ‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô")
        st.metric(label="üìä ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 100 ‡∏Ñ‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Accuracy)", value=f"{acc_score * 100:.2f}%")



#if st.button("‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"):
#    from sklearn.tree import export_text

#    tree_rules = export_text(clf, feature_names=list(clf.feature_names_in_))
#    st.code(tree_rules, language='text')  # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á code ‡πÉ‡∏ô Streamlit



